#!/usr/bin/env babel-node
import webpack from 'webpack';
import config from '../dev/webpack.test.config';
import {spawn} from 'child_process';
import yargs from 'yargs';
import {readdirAsync} from 'readdir-recursive-promise';

const OUT = {
  dir: '.',
  name: '.webpack-test-bundle.js',
  path: require('path').join(__dirname, '..', '.webpack-test-bundle.js'),
};

var {argv} = yargs
  .boolean('watch')

async function setupWebpack(){
  var testConfig = Object.assign({}, config);
  testConfig.output.path = OUT.dir;
  testConfig.output.filename = OUT.name;

  if (argv._.length) {
    testConfig.entry = argv._;
  }
  else {
    const structure = await readdirAsync("src");
    const paths = [];
    function process(dir){
      if (!dir.files) return;
      dir.files.forEach((file) => {
        if (file.name === '__test__') {
          file.files.forEach((testFile) => {

            paths.push('./' + file.path + '/' + testFile.name);
          });
        }
        else if (file.files) {
          process(file);
        }
      });
    }
    process(structure);
    console.log('Running these tests: \n', paths);
    testConfig.entry = paths;
  }

  var compiler = webpack(testConfig);
  return compiler;
}

setupWebpack().then((compiler) => {
  console.log(`Running webpack in ${argv.watch ? 'watch' : 'single run'} mode.`);
  const handleWebpackBuild = (err, stats) => {
    if (err) console.error(err);
    else {
      //console.error(stats);
      runMocha();
    };
  };

  if (argv.watch) {
    compiler.watch({
      aggregateTimeout: 1000,
    }, handleWebpackBuild)
  }
  else {
    compiler.run(handleWebpackBuild);
  }
})
.catch((err) => {
  console.error(`Running webpack failed`);
  console.error(err);
  process.exit(3);
});

function runMocha(){
  var mochaOpts = ['--compilers', 'js:babel/register'];

  mochaOpts.push(OUT.path);

  spawn('mocha', mochaOpts, {stdio: 'inherit'})
  .on('exit', function(code){
    if (argv.watch) {
      console.error(`Mocha exited with ${code}`);
    }
    else {
      process.exit(code);
    }
  });
}
